# -*- coding: utf-8 -*-
"""gradescope_Creatica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t6vKZbYS5ehSxIHMdqj6a0EbPFBoTZ3p
"""

#import gradescope data
import pandas as pd
import numpy as np
df = pd.read_excel('/content/sample_data/gradescopedata.xlsx')
# df.head()

#categorize assignments by duration in hours
DaysElapsed = df.DeadlineDate - df.UploadDate
DaysElapsed = DaysElapsed.apply(lambda x: str(x))
DaysElapsed = DaysElapsed.apply(lambda x: x.split()[0])
DaysElapsed = DaysElapsed.apply(lambda x: int(x))

UploadHour = df.UploadTime.apply(lambda x: int(x.split(':')[0]))
DeadlineHour = df.DeadlineTime.apply(lambda x: int(x.split(':')[0]))
HoursElapsed = DeadlineHour-UploadHour

df['AssignmentHoursDuration'] = (DaysElapsed*24) + HoursElapsed
def mapping(x):
  if x <= 48:
    return 'Category 1'
  elif (x > 48) and (x <=168):
    return 'Category 2'
  else:
    return 'Category 3'
df['AssignmentDurationCategories'] = df.AssignmentHoursDuration.apply(lambda x:mapping(x))
# print(df)

#extract latest submission time and date
LatestSubmissionHour = df.ListOfSubmissions.apply(lambda x : x.split(',')[-1].strip(']'))

SubmissionHoursElapsed = DeadlineHour - LatestSubmissionHour.apply(lambda x: int(x.split(':')[0]))

SubmissionDaysElapsed = df.DeadlineDate - df.SubmissionDate
SubmissionDaysElapsed = SubmissionDaysElapsed.apply(lambda x: str(x))
SubmissionDaysElapsed = SubmissionDaysElapsed.apply(lambda x: x.split()[0])
SubmissionDaysElapsed = SubmissionDaysElapsed.apply(lambda x: int(x))

df['SubmissionHoursDuration'] = SubmissionDaysElapsed*24 + SubmissionHoursElapsed
# df.SubmissionHoursDuration
# df.head()

#assign points 
def pointbins(x):
  x['Points'] = 0
  for i in range(len(x)):
    if x.iloc[i, df.columns.get_loc('AssignmentDurationCategories')] == 'Category 1':
      # print(1)
      if x.iloc[i, df.columns.get_loc('SubmissionHoursDuration')] < 0:
        x.iloc[i, df.columns.get_loc('Points')]-= 5
      else:
        x.iloc[i, df.columns.get_loc('Points')]+= 5
    elif x.iloc[i, df.columns.get_loc('AssignmentDurationCategories')] == 'Category 2':
      # print(2)
      if x.iloc[i, df.columns.get_loc('SubmissionHoursDuration')] < 0:
        x.iloc[i, df.columns.get_loc('Points')]-= 20
      else:
        x.iloc[i, df.columns.get_loc('Points')]+= 10
    elif x.iloc[i, df.columns.get_loc('AssignmentDurationCategories')] == 'Category 3':
      # print(3)
      if x.iloc[i, df.columns.get_loc('SubmissionHoursDuration')] < 0:
        x.iloc[i, df.columns.get_loc('Points')]-= 50
      else:
        x.iloc[i, df.columns.get_loc('Points')]+= 25
    else:
      # print('None of them')
      return
  return x
df = pointbins(df)
# df.head(20)

#grouping by student to find total points
df = df.groupby('StudentID').agg('sum').drop(['AssignmentID', 'AssignmentHoursDuration', 'SubmissionHoursDuration'], axis = 1).rename(columns = {"Points": "Total Points"})
# df.head()

